/**
 * File Handler
 * –û–±—Ä–æ–±–ª—è—î —Ñ–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ File System Access API
 */

class FileHandler {
    constructor() {
        this.inputFolderHandle = null;
        this.outputFolderHandle = null;
        this.supportedFormats = [
            'jpg', 'jpeg', 'png', 'tiff', 'tif', 'heic', 'webp', 
            'bmp', 'gif', 'cr2', 'nef', 'arw', 'dng'
        ];
        this.maxFileSize = 100 * 1024 * 1024; // 100MB
        this.isProcessing = false;
        this.processedFiles = 0;
        this.totalFiles = 0;
        this.errors = 0;
        this.skipped = 0;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥—Ç—Ä–∏–º–∫—É File System Access API
     * @returns {boolean} –ß–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è API
     */
    isSupported() {
        return 'showDirectoryPicker' in window;
    }

    /**
     * –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
     * @returns {Promise<FileSystemDirectoryHandle>} Handle –ø–∞–ø–∫–∏
     */
    async selectInputFolder() {
        try {
            if (!this.isSupported()) {
                throw new Error('File System Access API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
            }

            this.inputFolderHandle = await window.showDirectoryPicker({
                mode: 'read'
            });

            console.log('üìÅ –í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –≤–∏–±—Ä–∞–Ω–∞:', this.inputFolderHandle.name);
            return this.inputFolderHandle;
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
                return null;
            }
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –í–∏–±—ñ—Ä –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
     * @returns {Promise<FileSystemDirectoryHandle>} Handle –ø–∞–ø–∫–∏
     */
    async selectOutputFolder() {
        try {
            if (!this.isSupported()) {
                throw new Error('File System Access API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
            }

            this.outputFolderHandle = await window.showDirectoryPicker({
                mode: 'readwrite'
            });

            console.log('üìÅ –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –≤–∏–±—Ä–∞–Ω–∞:', this.outputFolderHandle.name);
            return this.outputFolderHandle;
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
                return null;
            }
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–ø–∫—É
     * @param {FileSystemDirectoryHandle} folderHandle - Handle –ø–∞–ø–∫–∏
     * @returns {Promise<Object>} –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–ø–∫—É
     */
    async getFolderInfo(folderHandle) {
        try {
            const files = await this.getImageFiles(folderHandle);
            const totalSize = files.reduce((sum, fileObj) => sum + fileObj.file.size, 0);
            
            return {
                name: folderHandle.name,
                fileCount: files.length,
                totalSize: totalSize,
                formattedSize: this.formatFileSize(totalSize)
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞–ø–∫—É:', error);
            return {
                name: folderHandle.name,
                fileCount: 0,
                totalSize: 0,
                formattedSize: '0 B'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–∞–ø–∫–∏
     * @param {FileSystemDirectoryHandle} folderHandle - Handle –ø–∞–ø–∫–∏
     * @param {FileSystemDirectoryHandle} parentHandle - Handle –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –ø–∞–ø–∫–∏
     * @returns {Promise<Array>} –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {file, handle, parentHandle}
     */
    async getImageFiles(folderHandle, parentHandle = null) {
        const files = [];
        
        try {
            for await (const [name, handle] of folderHandle.entries()) {
                if (handle.kind === 'file') {
                    const extension = name.split('.').pop().toLowerCase();
                    if (this.supportedFormats.includes(extension)) {
                        try {
                            const file = await handle.getFile();
                            console.log(`üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª ${name}: ${file.size} –±–∞–π—Ç, —Ç–∏–ø: ${file.type}`);
                            files.push({ file, handle, parentHandle: folderHandle });
                        } catch (error) {
                            console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª ${name}:`, error);
                        }
                    }
                } else if (handle.kind === 'directory') {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø—ñ–¥–ø–∞–ø–∫–∏
                    const subFiles = await this.getImageFiles(handle, folderHandle);
                    files.push(...subFiles);
                }
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏:', error);
        }

        return files;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
     * @param {string} filename - –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
     * @returns {boolean} –ß–∏ —î —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
     */
    isImageFile(filename) {
        const extension = filename.split('.').pop().toLowerCase();
        return this.supportedFormats.includes(extension);
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
     * @param {number} bytes - –†–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É—î –¥–∞—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
     * @param {Object} exifData - EXIF –¥–∞–Ω—ñ
     * @param {File} file - –§–∞–π–ª
     * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –¥–∞—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     */
    formatDateInfo(exifData, file) {
        const dateInfo = [];
        
        // –î–∞—Ç–∞ –∑–π–æ–º–∫–∏ (DateTimeOriginal)
        if (exifData.dateTaken) {
            dateInfo.push(`–î–∞—Ç–∞ –∑–π–æ–º–∫–∏ - ${exifData.dateTaken}`);
        } else {
            dateInfo.push('–î–∞—Ç–∞ –∑–π–æ–º–∫–∏ - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        // DateTime
        if (exifData.dateTime) {
            dateInfo.push(`DateTime - ${exifData.dateTime}`);
        } else {
            dateInfo.push('DateTime - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        // DateTimeDigitized
        if (exifData.dateDigitized) {
            dateInfo.push(`DateTimeDigitized - ${exifData.dateDigitized}`);
        } else {
            dateInfo.push('DateTimeDigitized - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        // GPS –¥–∞—Ç–∏
        if (exifData.gpsDateStamp) {
            dateInfo.push(`GPSDateStamp - ${exifData.gpsDateStamp}`);
        } else {
            dateInfo.push('GPSDateStamp - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        if (exifData.gpsTimeStamp) {
            dateInfo.push(`GPSTimeStamp - ${exifData.gpsTimeStamp}`);
        } else {
            dateInfo.push('GPSTimeStamp - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        // –î–∞—Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
        const fileDate = new Date(file.lastModified);
        const formattedFileDate = fileDate.toISOString().replace('T', ' ').substring(0, 19);
        dateInfo.push(`–î–∞—Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É - ${formattedFileDate}`);
        
        return dateInfo.join(' | ');
    }

    /**
     * –ß–∏—Ç–∞—î EXIF –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
     * @param {File} file - –§–∞–π–ª
     * @returns {Promise<Object>} EXIF –¥–∞–Ω—ñ
     */
    async readExifData(file) {
        try {
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WASM –º–æ–¥—É–ª—å –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è EXIF
            if (window.wasmLoader && window.wasmLoader.isModuleLoaded()) {
                // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è WASM (—Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 64KB –¥–ª—è EXIF –ø–∞—Ä—Å–∏–Ω–≥—É)
                const maxSize = 64 * 1024; // 64KB
                const dataToProcess = uint8Array.length > maxSize ? uint8Array.slice(0, maxSize) : uint8Array;
                
                const readerPtr = window.wasmLoader.createExifReader(dataToProcess);
                
                if (readerPtr) {
                    const exifData = {
                        dateTaken: window.wasmLoader.readExifDate(readerPtr),
                        dateTime: window.wasmLoader.readExifDateTime(readerPtr),
                        dateDigitized: window.wasmLoader.readExifDateTimeDigitized(readerPtr),
                        gpsDateStamp: window.wasmLoader.readExifGpsDateStamp(readerPtr),
                        gpsTimeStamp: window.wasmLoader.readExifGpsTimeStamp(readerPtr),
                        cameraMake: window.wasmLoader.readCameraMake(readerPtr),
                        cameraModel: window.wasmLoader.readCameraModel(readerPtr),
                        width: window.wasmLoader.readImageWidth(readerPtr),
                        height: window.wasmLoader.readImageHeight(readerPtr),
                        hasExif: window.wasmLoader.hasExifData(readerPtr)
                    };
                    
                    window.wasmLoader.destroyExifReader(readerPtr);
                    return exifData;
                }
            }
            
            // Fallback: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
            return {
                dateTaken: '',
                dateTime: '',
                dateDigitized: '',
                gpsDateStamp: '',
                gpsTimeStamp: '',
                cameraMake: '',
                cameraModel: '',
                width: 0,
                height: 0,
                hasExif: false
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è EXIF –¥–∞–Ω–∏—Ö:', error);
            return {
                dateTaken: '',
                dateTime: '',
                dateDigitized: '',
                gpsDateStamp: '',
                gpsTimeStamp: '',
                cameraMake: '',
                cameraModel: '',
                width: 0,
                height: 0,
                hasExif: false
            };
        }
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω —Ñ–∞–π–ª
     * @param {File} file - –§–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @param {Object} options - –û–ø—Ü—ñ—ó –æ–±—Ä–æ–±–∫–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
     */
    async processFile(file, options = {}) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            if (file.size > this.maxFileSize) {
                throw new Error(`–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π: ${this.formatFileSize(file.size)}`);
            }

            // –ß–∏—Ç–∞—î–º–æ EXIF –¥–∞–Ω—ñ
            const exifData = await this.readExifData(file);
            
            // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —è–∫ Uint8Array –¥–ª—è WASM
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);

            // –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ WASM –º–æ–¥—É–ª—å
            if (window.wasmLoader && window.wasmLoader.isModuleLoaded()) {
                console.log(`üî¨ WASM –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É ${file.name} –∑ —Ä–æ–∑–º—ñ—Ä–æ–º ${file.size} –±–∞–π—Ç`);
                
                // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è WASM (—Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 64KB)
                const maxSize = 64 * 1024; // 64KB
                const dataToProcess = uint8Array.length > maxSize ? uint8Array.slice(0, maxSize) : uint8Array;
                
                window.wasmLoader.processPhoto(
                    file.name,
                    dataToProcess,
                    exifData.dateTaken,
                    new Date(file.lastModified).toISOString().split('T')[0],
                    exifData.cameraMake,
                    exifData.cameraModel,
                    '', // location
                    file.size,
                    exifData.width,
                    exifData.height
                );
                console.log(`‚úÖ WASM –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${file.name}`);
            } else {
                console.log(`‚ö†Ô∏è WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –¥–ª—è ${file.name}`);
            }

            this.processedFiles++;
            
            return {
                success: true,
                filename: file.name,
                size: file.size,
                exifData: exifData,
                dateInfo: this.formatDateInfo(exifData, file)
            };
        } catch (error) {
            this.errors++;
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${file.name}:`, error);
            
            return {
                success: false,
                filename: file.name,
                error: error.message
            };
        }
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
     * @param {Object} options - –û–ø—Ü—ñ—ó –æ–±—Ä–æ–±–∫–∏
     * @param {Function} progressCallback - Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
     */
    async processAllFiles(options = {}, progressCallback = null) {
        if (!this.inputFolderHandle) {
            throw new Error('–í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞');
        }

        if (!this.outputFolderHandle) {
            throw new Error('–í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞');
        }

        this.isProcessing = true;
        this.processedFiles = 0;
        this.errors = 0;
        this.skipped = 0;

        try {
            const files = await this.getImageFiles(this.inputFolderHandle);
            this.totalFiles = files.length;

            if (files.length === 0) {
                throw new Error('–í –ø–∞–ø—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å');
            }

            console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);
            
            
            // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
            for (let i = 0; i < files.length; i++) {
                if (!this.isProcessing) {
                    break; // –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
                }

                const fileObj = files[i];
                const file = fileObj.file;
                const fileHandle = fileObj.handle;
                const parentHandle = fileObj.parentHandle;
                
                // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ WASM
                const result = await this.processFile(file, options);
                
                console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${file.name}:`, result);
                console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${file.size} –±–∞–π—Ç`);

                // –ö–æ–ø—ñ—é—î–º–æ –∞–±–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ–∞–π–ª
                await this.copyOrMoveFile(file, options.processingMode || 'copy', fileHandle, parentHandle);

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –ø—Ä–æ–≥—Ä–µ—Å—É
                if (progressCallback) {
                    progressCallback({
                        current: i + 1,
                        total: files.length,
                        processed: this.processedFiles,
                        errors: this.errors,
                        skipped: this.skipped,
                        currentFile: file.name,
                        result: result
                    });
                }

                // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è UI
                await new Promise(resolve => setTimeout(resolve, 10));
            }


            return {
                success: true,
                total: files.length,
                processed: this.processedFiles,
                errors: this.errors,
                skipped: this.skipped
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤:', error);
            throw error;
        } finally {
            this.isProcessing = false;
        }
    }

    /**
     * –ö–æ–ø—ñ—é—î –∞–±–æ –ø–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–∞–ø–∫—É
     * @param {File} file - –§–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @param {string} mode - –†–µ–∂–∏–º: 'copy' –∞–±–æ 'move'
     * @param {FileSystemFileHandle} originalFileHandle - Handle –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è)
     * @param {FileSystemDirectoryHandle} parentHandle - Handle –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –ø–∞–ø–∫–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
     */
    async copyOrMoveFile(file, mode = 'copy', originalFileHandle = null, parentHandle = null) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ WASM
            const metadata = this.getFileMetadata(file);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            const folderPath = this.createFolderStructure(metadata);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏
            const targetFolderHandle = await this.createFolders(folderPath);
            
            // –ö–æ–ø—ñ—é—î–º–æ –∞–±–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ–∞–π–ª
            if (mode === 'copy') {
                await this.copyFileToFolder(file, targetFolderHandle);
                console.log(`üìã –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ${file.name} -> ${folderPath}`);
            } else {
                await this.moveFileToFolder(file, targetFolderHandle, originalFileHandle, parentHandle);
                console.log(`üì¶ –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ: ${file.name} -> ${folderPath}`);
            }
            
            this.processedFiles++;
            
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${file.name}:`, error);
            this.errors++;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–∞–π–ª—É –∑ WASM
     * @param {File} file - –§–∞–π–ª
     * @returns {Object} –ú–µ—Ç–∞–¥–∞–Ω—ñ
     */
    getFileMetadata(file) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫
        const date = new Date(file.lastModified);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        
        return {
            dateTaken: `${year}-${month}-${day}`,
            cameraMake: '',
            cameraModel: '',
            fileSize: file.size,
            format: file.name.split('.').pop().toLowerCase()
        };
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è —Ñ–∞–π–ª—É
     * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–∞–π–ª—É
     * @returns {string} –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
     */
    createFolderStructure(metadata) {
        const basePath = this.outputFolderHandle.name;
        
        if (!metadata.dateTaken) {
            return `${basePath}/–ë–µ–∑ –¥–∞—Ç–∏`;
        }
        
        const [year, month, day] = metadata.dateTaken.split('-');
        
        // –ú–∞–ø–∏ –º—ñ—Å—è—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        const monthNames = {
            '01': '01_—Å—ñ—á–µ–Ω—å', '02': '02_–ª—é—Ç–∏–π', '03': '03_–±–µ—Ä–µ–∑–µ–Ω—å',
            '04': '04_–∫–≤—ñ—Ç–µ–Ω—å', '05': '05_—Ç—Ä–∞–≤–µ–Ω—å', '06': '06_—á–µ—Ä–≤–µ–Ω—å',
            '07': '07_–ª–∏–ø–µ–Ω—å', '08': '08_—Å–µ—Ä–ø–µ–Ω—å', '09': '09_–≤–µ—Ä–µ—Å–µ–Ω—å',
            '10': '10_–∂–æ–≤—Ç–µ–Ω—å', '11': '11_–ª–∏—Å—Ç–æ–ø–∞–¥', '12': '12_–≥—Ä—É–¥–µ–Ω—å'
        };
        
        const monthName = monthNames[month] || month;
        
        return `${basePath}/${year}/${monthName}/${day}`;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫–∏ –≤ —Ñ–∞–π–ª–æ–≤—ñ–π —Å–∏—Å—Ç–µ–º—ñ
     * @param {string} folderPath - –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
     */
    async createFolders(folderPath) {
        try {
            const parts = folderPath.split('/').filter(part => part && part !== this.outputFolderHandle.name);
            let currentHandle = this.outputFolderHandle;
            
            for (const part of parts) {
                try {
                    currentHandle = await currentHandle.getDirectoryHandle(part);
                } catch (error) {
                    if (error.name === 'NotFoundError') {
                        currentHandle = await currentHandle.getDirectoryHandle(part, { create: true });
                        console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: ${part}`);
                    } else {
                        throw error;
                    }
                }
            }
            
            return currentHandle;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫:', error);
            throw error;
        }
    }

    /**
     * –ö–æ–ø—ñ—é—î —Ñ–∞–π–ª —É –ø–∞–ø–∫—É
     * @param {File} file - –§–∞–π–ª –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
     * @param {FileSystemDirectoryHandle} targetFolderHandle - Handle –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
     */
    async copyFileToFolder(file, targetFolderHandle) {
        console.log(`üîç –î–ï–¢–ê–õ–¨–ù–ò–ô DEBUG: –ü–æ—á–∞—Ç–æ–∫ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è ${file.name}`);
        console.log(`üìä –†–æ–∑–º—ñ—Ä –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É: ${file.size} –±–∞–π—Ç`);
        console.log(`üì± User Agent: ${navigator.userAgent}`);
        console.log(`üìÅ –¢–∏–ø —Ñ–∞–π–ª—É: ${file.type}`);
        console.log(`üìÖ –î–∞—Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: ${file.lastModified}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –≤–∑–∞–≥–∞–ª—ñ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π
        if (file.size === 0) {
            throw new Error(`–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª ${file.name} –º–∞—î —Ä–æ–∑–º—ñ—Ä 0 –±–∞–π—Ç!`);
        }
        

        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª —É —Ü—ñ–ª—å–æ–≤—ñ–π –ø–∞–ø—Ü—ñ
            const fileName = file.name;
            console.log(`üìÅ –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª: ${fileName} –≤ –ø–∞–ø—Ü—ñ: ${targetFolderHandle.name}`);
            
            const newFileHandle = await targetFolderHandle.getFileHandle(fileName, { create: true });
            console.log(`‚úÖ –§–∞–π–ª handle —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è: ${fileName}`);
            
            const writable = await newFileHandle.createWritable();
            console.log(`‚úÖ Writable stream —Å—Ç–≤–æ—Ä–µ–Ω–æ`);
            
            // –î–ª—è –º—ñ—Å—Ç–∫–æ—Å—Ç—ñ –∑ –º–æ–±—ñ–ª—å–Ω–∏–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Blob –∑–∞–º—ñ—Å—Ç—å Uint8Array
            console.log(`üìù –ó–∞–ø–∏—Å—É—î–º–æ Blob –∑ —Ä–æ–∑–º—ñ—Ä–æ–º: ${file.size} –±–∞–π—Ç`);
            await writable.write(file);
            console.log(`‚úÖ Blob –∑–∞–ø–∏—Å–∞–Ω–æ`);
            
            // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é
            await writable.close();
            console.log(`‚úÖ Writable stream closed`);
            
            // –í–ê–ñ–õ–ò–í–û: –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π handle –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å–∏ –¥–ª—è Android Chrome
            const finalFileHandle = await targetFolderHandle.getFileHandle(fileName);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–∞–ø–∏—Å–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            const writtenFile = await finalFileHandle.getFile();
            console.log(`üìè –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –∑–∞–ø–∏—Å–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É: ${writtenFile.size} –±–∞–π—Ç`);
            
            if (writtenFile.size === 0) {
                console.error(`‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ó–∞–ø–∏—Å–∞–Ω–∏–π —Ñ–∞–π–ª –º–∞—î —Ä–æ–∑–º—ñ—Ä 0 –±–∞–π—Ç!`);
                throw new Error('–§–∞–π–ª –∑–∞–ø–∏—Å–∞–≤—Å—è –∑ —Ä–æ–∑–º—ñ—Ä–æ–º 0 –±–∞–π—Ç');
            }
            
            console.log(`‚úÖ –£–°–ü–Ü–®–ù–û –∑–∞–ø–∏—Å–∞–Ω–æ —Ñ–∞–π–ª: ${fileName} (${writtenFile.size} –±–∞–π—Ç)`);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
            console.error(`‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: name="${error.name}", message="${error.message}"`);
            
            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ InvalidStateError –¥–ª—è Android Chrome
            if (error.name === 'InvalidStateError') {
                console.log(`ü§ñ –í–∏—è–≤–ª–µ–Ω–æ Android Chrome InvalidStateError - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–æ–±–ª–∏–≤–∏–π –ø—ñ–¥—Ö—ñ–¥`);
            }
            
            // –Ø–∫—â–æ –∑–∞–ø–∏—Å–∏ Blob –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ ArrayBuffer
            try {
                console.log(`üîÑ –ü–û–ß–ê–¢–û–ö FALLBACK –º–µ—Ç–æ–¥—É –¥–ª—è ${file.name}`);
                
                const arrayBuffer = await file.arrayBuffer();
                console.log(`üìä ArrayBuffer —Ä–æ–∑–º—ñ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`);
                
                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º state –Ω–∞ Android Chrome
                try {
                    await targetFolderHandle.removeEntry(file.name);
                    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ fallback`);
                } catch (removeError) {
                    console.log(`‚ö†Ô∏è –ù–µ –º–æ–∂—É –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª: ${removeError.message}`);
                }
                
                const newFileHandle = await targetFolderHandle.getFileHandle(file.name, { create: true });
                const writable = await newFileHandle.createWritable();
                
                // –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ —á–∞–Ω–∫–∞—Ö –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
                console.log(`üìù –ó–∞–ø–∏—Å—É—î–º–æ —á–µ—Ä–µ–∑ chunks –º–µ—Ç–æ–¥...`);
                await this.writeInChunks(writable, arrayBuffer);
                await writable.close();
                
                // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π handle –ø—ñ—Å–ª—è close() –¥–ª—è Android
                const finalFileHandle = await targetFolderHandle.getFileHandle(file.name);
                const writtenFile = await finalFileHandle.getFile();
                console.log(`üìè FALLBACK –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É: ${writtenFile.size} –±–∞–π—Ç`);
                
                if (writtenFile.size === 0) {
                    console.error(`‚ùå FALLBACK –¢–ê–ö–û–ñ –ü–†–û–ô–®–û–í: –§–∞–π–ª –≤—Å–µ —â–µ 0 –±–∞–π—Ç!`);
                    throw new Error('Fallback –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–∂ –¥–∞—î 0 –±–∞–π—Ç');
                }
                
                console.log(`‚úÖ FALLBACK –£–°–ü–Ü–®–ù–û: ${file.name} (${writtenFile.size} –±–∞–π—Ç)`);
                
            } catch (fallbackError) {
                console.error('‚ùå FALLBACK –ü–û–í–ù–Ü–°–¢–Æ –ü–†–û–í–ê–õ–ò–í–°–Ø:', fallbackError);
                
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - –ø—Ä—è–º–∞ –ø–µ—Ä–µ–¥–∞—á–∞ buffer
                try {
                    console.log(`üîÑ –û–°–¢–ê–ù–ù–Ø –°–ü–†–û–ë–ê –ø—Ä—è–º–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è ${file.name}`);
                    
                    const arrayBuffer = await file.arrayBuffer();
                    
                    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Å–ø—Ä–æ–±–æ—é
                    try {
                        await targetFolderHandle.removeEntry(file.name);
                        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Å–ø—Ä–æ–±–æ—é`);
                    } catch (removeError) {
                        console.log(`‚ö†Ô∏è –ù–µ –º–æ–∂—É –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª: ${removeError.message}`);
                    }
                    
                    const newFileHandle = await targetFolderHandle.getFileHandle(file.name, { create: true });
                    const writable = await newFileHandle.createWritable();
                    
                    // –ü–∏—à–µ–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—è –±—É—Ñ–µ—Ä –Ω–∞–ø—Ä—è–º—É
                    await writable.write(arrayBuffer);
                    await writable.close();
                    
                    // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π handle –ø—ñ—Å–ª—è close() –¥–ª—è Android
                    const finalFileHandle = await targetFolderHandle.getFileHandle(file.name);
                    const writtenFile = await finalFileHandle.getFile();
                    console.log(`üìè –û–°–¢–ê–ù–ù–Ø –°–ü–†–û–ë–ê —Ä–æ–∑–º—ñ—Ä: ${writtenFile.size} –±–∞–π—Ç`);
                    
                    if (writtenFile.size === 0) {
                        throw new Error('–ù–∞–≤—ñ—Ç—å –ø—Ä—è–º–∞ –ø–µ—Ä–µ–¥–∞—á–∞ buffer –Ω–µ –ø—Ä–∞—Ü—é—î');
                    }
                    
                    console.log(`‚úÖ –û–°–¢–ê–ù–ù–Ø –°–ü–†–û–ë–ê –£–°–ü–Ü–®–ù–ê!`);
                    
                } catch (lastTryError) {
                    console.error('‚ùå –í–°–Ü –°–ü–†–û–ë–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–Ø!');
                    throw new Error(`–í—Å—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ø–∏—Å—É –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å: ${lastTryError.message}`);
                }
            }
        }
    }
    
    /**
     * –ó–∞–ø–∏—Å—É—î –¥–∞–Ω—ñ –ø–æ —á–∞–Ω–∫–∞—Ö –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –º–æ–±—ñ–ª—å–Ω–∏–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏
     * @param {FileSystemWritableFileTransform} writable - Writable –ø–æ—Ç–æ–∫
     * @param {ArrayBuffer} arrayBuffer - –î–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É
     */
    async writeInChunks(writable, arrayBuffer) {
        const chunkSize = 256 * 1024; // 256KB —á–∞–Ω–∫–∏ (–º–µ–Ω—à–µ –¥–ª—è Android)
        const uint8Array = new Uint8Array(arrayBuffer);
        
        console.log(`üîÑ –ó–∞–ø–∏—Å –ø–æ —á–∞–Ω–∫–∞—Ö: ${uint8Array.length} –±–∞–π—Ç, —Ä–æ–∑–º—ñ—Ä chunk: ${chunkSize}`);
        
        const totalChunks = Math.ceil(uint8Array.length/chunkSize);
        
        for (let offset = 0; offset < uint8Array.length; offset += chunkSize) {
            const chunk = uint8Array.slice(offset, offset + chunkSize);
            const chunkNumber = Math.floor(offset/chunkSize) + 1;
            
            console.log(`üì¶ –ó–∞–ø–∏—Å—É—î–º–æ chunk ${chunkNumber}/${totalChunks} (${chunk.length} –±–∞–π—Ç)`);
            
            await writable.write({
                type: 'write',
                data: chunk
            });
            
            // –ü–∞—É–∑–∞ –º—ñ–∂ —á–∞–Ω–∫–∞–º–∏ –¥–ª—è Android —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            await new Promise(resolve => setTimeout(resolve, 10));
        }
        
        console.log(`‚úÖ –í—Å—ñ chunks –∑–∞–ø–∏—Å–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ`);
    }

    /**
     * –î–æ–¥–∞—î —Ñ–∞–π–ª –¥–æ —á–µ—Ä–≥–∏ –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è –Ω–∞ Android Chrome
     * @param {File} file - –§–∞–π–ª –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è
     */
    addFileToDownloadQueue(file) {
        console.log(`üì• –î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª –¥–æ —á–µ—Ä–≥–∏: ${file.name} (${file.size} –±–∞–π—Ç)`);
        this.downloadQueue.push({
            file: file,
            fileName: file.name,
            fileSize: file.size,
            downloadURL: null
        });
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –≤—Å—é —á–µ—Ä–≥—É —Å–∫–∞—á—É–≤–∞–Ω—å –¥–ª—è Android Chrome
     */
    async processDownloadQueue() {
        if (this.downloadQueue.length === 0) {
            console.log(`üì• –ß–µ—Ä–≥–∞ —Å–∫–∞—á—É–≤–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—è`);
            return;
        }

        console.log(`üì• –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–≥—É —Å–∫–∞—á—É–≤–∞–Ω—å: ${this.downloadQueue.length} —Ñ–∞–π–ª—ñ–≤`);

        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏ —è–∫—â–æ —ó—Ö –±–∞–≥–∞—Ç–æ
            if (this.downloadQueue.length > 3) {
                await this.createAndDownloadZipArchive();
            } else {
                // –Ø–∫—â–æ —Ñ–∞–π–ª—ñ–≤ –º–∞–ª–æ - —Å–∫–∞—á—É—î–º–æ –ø–æ –æ–¥–Ω–æ–º—É
                await this.downloadFilesIndividually();
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ —Å–∫–∞—á—É–≤–∞–Ω—å:`, error);
            this.showUserMessage(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î ZIP –∞—Ä—Ö—ñ–≤ —ñ —Å–∫–∞—á—É—î –π–æ–≥–æ
     */
    async createAndDownloadZipArchive() {
        console.log(`üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤ –∑ ${this.downloadQueue.length} —Ñ–∞–π–ª—ñ–≤`);
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSZip —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —è–∫—â–æ –Ω—ñ - —Å–∫–∞—á—É—î–º–æ –æ–∫—Ä–µ–º–æ
        if (typeof JSZip !== 'undefined') {
            // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ZIP —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            await this.downloadFilesIndividually();
        } else {
            await this.downloadFilesIndividually();
        }
    }

    /**
     * –°–∫–∞—á—É—î —Ñ–∞–π–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
     */
    async downloadFilesIndividually() {
        console.log(`üì• –°–∫–∞—á—É–≤–∞–Ω–Ω—è ${this.downloadQueue.length} —Ñ–∞–π–ª—ñ–≤ –ø–æ –æ–¥–Ω–æ–º—É`);
    
        for (let i = 0; i < this.downloadQueue.length; i++) {
            const item = this.downloadQueue[i];
            
            try {
                // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è —Ñ–∞–π–ª—É
                const fileURL = URL.createObjectURL(item.file);
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π —è–∫–æ—Ä–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è
                const downloadLink = document.createElement('a');
                downloadLink.href = fileURL;
                downloadLink.download = item.fileName;
                downloadLink.style.display = 'none';
                
                // –î–æ–¥–∞—î–º–æ –¥–æ DOM —Ç–∞ –∫–ª—ñ–∫–∞—î–º–æ
                document.body.appendChild(downloadLink);
                downloadLink.click();
                
                // –í–∏–¥–∞–ª—è—î–º–æ –∑ DOM —Ç–∞ –æ—á–∏—â—É—î–º–æ URL
                document.body.removeChild(downloadLink);
                URL.revokeObjectURL(fileURL);
                
                console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${item.fileName}`);
                
                // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 500));
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è ${item.fileName}:`, error);
            }
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        this.showAndroidDownloadComplete();
        
        // –û—á–∏—â—É—î–º–æ —á–µ—Ä–≥—É
        this.downloadQueue = [];
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è –Ω–∞ Android
     */
    showAndroidDownloadComplete() {
        const count = this.downloadQueue.length;
        const message = `üì• ${count} —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É –ø–∞–ø–∫—É Downloads –Ω–∞ –≤–∞—à–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó. 
        
–û—Ä–≥–∞–Ω—ñ–∑—É–π—Ç–µ —Ñ–∞–π–ª–∏ –≤—Ä—É—á–Ω—É:
‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–∞–ø–∫—É Downloads  
‚Ä¢ –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ –¥–∞—Ç–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "2024-07-03")
‚Ä¢ –ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ü—é –ø–∞–ø–∫—É
        
–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏! üì±`;

        this.showUserMessage(message);
    }

    /**
     * –û–±—Ö—ñ–¥ –ø—Ä–æ–±–ª–µ–º –∑ Android Chrome —á–µ—Ä–µ–∑ showSaveFilePicker
     * @param {File} file - –§–∞–π–ª –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
     * @param {FileSystemDirectoryHandle} targetFolderHandle - Handle –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
     */
    async androidChromeWorkaround(file, targetFolderHandle) {
        console.log(`üì± ANDROID WORKAROUND –¥–ª—è —Ñ–∞–π–ª—É: ${file.name}`);
        
        try {
            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ showSaveFilePicker –∑–∞–º—ñ—Å—Ç—å createWritable
            if ('showSaveFilePicker' in window) {
                console.log(`üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ showSaveFilePicker –¥–ª—è ${file.name}`);
                
                const fileHandle = await window.showSaveFilePicker({
                    suggestedName: file.name,
                    types: [{
                        description: 'JPEG –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è',
                        accept: {
                            'image/jpeg': ['.jpg', '.jpeg']
                        }
                    }]
                });
                
                const writable = await fileHandle.createWritable();
                await writable.write(file);
                await writable.close();
                
                console.log(`‚úÖ –£–°–ü–Ü–®–ù–û –∑–±–µ—Ä–µ–∂–µ–Ω–æ —á–µ—Ä–µ–∑ showSaveFilePicker: ${file.name}`);
                this.showUserMessage(`‚úÖ –§–∞–π–ª ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
                return;
            }
            
            // Fallback: –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            console.log(`üì• Fallback: –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª`);
            
            const fileURL = URL.createObjectURL(file);
            const downloadLink = document.createElement('a');
            downloadLink.href = fileURL;
            downloadLink.download = file.name;
            downloadLink.style.display = 'none';
            
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
            URL.revokeObjectURL(fileURL);
            
            this.showUserMessage(`–ü—Ä–æ–±–ª–µ–º–∞ –∑ Android Chrome. –§–∞–π–ª ${file.name} –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É.`);
            
        } catch (error) {
            console.error(`‚ùå Android workaround –Ω–µ –ø—Ä–∞—Ü—é—î:`, error);
            
            // –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É
            this.showUserMessage(`–ü–æ–º–∏–ª–∫–∞ Android Chrome: ${file.name}. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –±—Ä–∞—É–∑–µ—Ä –∞–±–æ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ñ–∞–π–ª–∏ –≤—Ä—É—á–Ω—É.`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    showUserMessage(message) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;
        
        modal.innerHTML = `
            <div style="
                background: white;
                padding: 2rem;
                border-radius: 0.5rem;
                max-width: 90%;
                text-align: center;
                box-shadow: 0 10px 25px rgba(0,0,0,0.3);
            ">
                <h3 style="margin: 0 0 1rem 0; color: #333;">üì± Android Chrome</h3>
                <p style="margin: 0 0 1.5rem 0; color: #666; line-height: 1.5;">${message}</p>
                <button onclick="this.closest('div').parentNode.remove()" style="
                    background: #007bff;
                    color: white;
                    border: none;
                    padding: 0.75rem 1.5rem;
                    border-radius: 0.25rem;
                    cursor: pointer;
                    font-size: 1rem;
                ">–ó—Ä–æ–∑—É–º—ñ–ª–æ</button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 10000);
    }

    /**
     * –ü–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª —É –ø–∞–ø–∫—É
     * @param {File} file - –§–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
     * @param {FileSystemDirectoryHandle} targetFolderHandle - Handle –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
     * @param {FileSystemFileHandle} originalFileHandle - Handle –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
     * @param {FileSystemDirectoryHandle} parentHandle - Handle –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –ø–∞–ø–∫–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    async moveFileToFolder(file, targetFolderHandle, originalFileHandle = null, parentHandle = null) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –∫–æ–ø—ñ—é—î–º–æ
            await this.copyFileToFolder(file, targetFolderHandle);
            
            // –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª (—è–∫—â–æ —î handle)
            if (originalFileHandle && parentHandle) {
                try {
                    // –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
                    await parentHandle.removeEntry(originalFileHandle.name);
                    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª: ${file.name}`);
                } catch (deleteError) {
                    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª:', deleteError);
                    console.log('‚ö†Ô∏è –§–∞–π–ª —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ, –∞–ª–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª –∑–∞–ª–∏—à–∏–≤—Å—è');
                }
            } else {
                console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è: –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
            }
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—Å–æ–≤—É—î –æ–±—Ä–æ–±–∫—É
     */
    cancelProcessing() {
        this.isProcessing = false;
        console.log('‚èπÔ∏è –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞');
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
     * @returns {Object} –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
     */
    getProgress() {
        return {
            isProcessing: this.isProcessing,
            processed: this.processedFiles,
            total: this.totalFiles,
            errors: this.errors,
            skipped: this.skipped,
            percentage: this.totalFiles > 0 ? Math.round((this.processedFiles / this.totalFiles) * 100) : 0
        };
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStatistics() {
        if (window.wasmLoader && window.wasmLoader.isModuleLoaded()) {
            return window.wasmLoader.getStatistics();
        }

        return {
            total_photos: this.processedFiles,
            valid_photos: this.processedFiles - this.errors,
            with_exif: 0,
            large_files: 0,
            total_size: 0,
            errors: this.errors
        };
    }

    /**
     * –û—á–∏—â–∞—î –¥–∞–Ω—ñ
     */
    clear() {
        this.processedFiles = 0;
        this.totalFiles = 0;
        this.errors = 0;
        this.skipped = 0;
        this.isProcessing = false;

        if (window.wasmLoader && window.wasmLoader.isModuleLoaded()) {
            window.wasmLoader.clearMetadata();
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
     * @param {number} sizeInMB - –†–æ–∑–º—ñ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
     */
    setMaxFileSize(sizeInMB) {
        this.maxFileSize = sizeInMB * 1024 * 1024;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
     * @returns {Array} –ú–∞—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç—ñ–≤
     */
    getSupportedFormats() {
        return [...this.supportedFormats];
    }

    /**
     * –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
     * @param {string} format - –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É
     */
    addSupportedFormat(format) {
        if (!this.supportedFormats.includes(format.toLowerCase())) {
            this.supportedFormats.push(format.toLowerCase());
        }
    }

    /**
     * –í–∏–¥–∞–ª—è—î —Ñ–æ—Ä–º–∞—Ç
     * @param {string} format - –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É
     */
    removeSupportedFormat(format) {
        const index = this.supportedFormats.indexOf(format.toLowerCase());
        if (index > -1) {
            this.supportedFormats.splice(index, 1);
        }
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
window.fileHandler = new FileHandler();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FileHandler;
}
