/**
 * Main Application
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
 */

class PhotoSorterApp {
    constructor() {
        this.wasmLoader = window.wasmLoader;
        this.fileHandler = window.fileHandler;
        this.isInitialized = false;
        this.currentSettings = {
            language: 'uk',
            folderFormat: 'ukrainian',
            maxFileSize: 100,
            processingMode: 'copy',
            createSubfolders: true,
            handleDuplicates: true
        };
        this.isProcessing = false;
        this.progressInterval = null;
    }

    /**
     * –î–µ—Ç–µ–∫—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (–û–° —Ç–∞ –±—Ä–∞—É–∑–µ—Ä)
     * @returns {Object} –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
     */
    getEnvironmentInfo() {
        const userAgent = navigator.userAgent;
        const platform = navigator.platform;
        
        // –î–µ—Ç–µ–∫—Ü—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
        let os = 'Unknown';
        if (userAgent.includes('Windows NT 10.0')) os = 'Windows 11';
        else if (userAgent.includes('Windows NT 6.3')) os = 'Windows 8.1';
        else if (userAgent.includes('Windows NT 6.2')) os = 'Windows 8';
        else if (userAgent.includes('Windows NT 6.1')) os = 'Windows 7';
        else if (userAgent.includes('Windows')) os = 'Windows';
        else if (userAgent.includes('Mac OS X')) {
            const match = userAgent.match(/Mac OS X (\d+)_(\d+)/);
            if (match) {
                const major = parseInt(match[1]);
                const minor = parseInt(match[2]);
                if (major >= 12) os = 'macOS 12+';
                else if (major === 11) os = 'macOS 11 (Big Sur)';
                else if (major === 10 && minor >= 15) os = 'macOS 10.15+ (Catalina)';
                else os = `macOS ${major}.${minor}`;
            } else os = 'macOS';
        }
        else if (userAgent.includes('iPhone')) os = 'iOS iPhone';
        else if (userAgent.includes('iPad')) os = 'iOS iPad';
        else if (userAgent.includes('Android')) os = 'Android';
        else if (platform.includes('Linux')) os = 'Linux';
        
        // –î–µ—Ç–µ–∫—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
        let browser = 'Unknown';
        let version = '';
        if (userAgent.includes('Edg/')) {
            browser = 'Edge';
            const match = userAgent.match(/Edg\/(\d+\.\d+)/);
            version = match ? match[1] : '';
        }
        else if (userAgent.includes('Chrome/') && !userAgent.includes('Edg')) {
            browser = 'Chrome';
            const match = userAgent.match(/Chrome\/(\d+\.\d+)/);
            version = match ? match[1] : '';
        }
        else if (userAgent.includes('Firefox/')) {
            browser = 'Firefox';
            const match = userAgent.match(/Firefox\/(\d+\.\d+)/);
            version = match ? match[1] : '';
        }
        else if (userAgent.includes('Safari/') && !userAgent.includes('Chrome')) {
            browser = 'Safari';
            const match = userAgent.match(/Version\/(\d+\.\d+)/);
            version = match ? match[1] : '';
        }
        else if (userAgent.includes('Opera/')) {
            browser = 'Opera';
            const match = userAgent.match(/Opera\/(\d+\.\d+)/);
            version = match ? match[1] : '';
        }
        
        return {
            os: os,
            browser: browser,
            version: version,
            fullBrowser: version ? `${browser} ${version}` : browser,
            isMobile: /Android|iPhone|iPad|BlackBerry|Windows Phone/i.test(userAgent),
            isSupported: this.isDeviceSupported(os, browser, userAgent)
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è OS + –±—Ä–∞—É–∑–µ—Ä
     * @param {string} os - –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
     * @param {string} browser - –ë—Ä–∞—É–∑–µ—Ä
     * @param {string} userAgent - User Agent
     * @returns {boolean} –ß–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
     */
    isDeviceSupported(os, browser, userAgent) {
        // Desktop –≤–µ—Ä—Å—ñ—ó –∑–∞–≤–∂–¥–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ
        const isDesktop = !/Android|iPhone|iPad|BlackBerry|Windows Phone/i.test(userAgent);
        
        if (isDesktop) {
            return true;
        }
        
        // –ú–æ–±—ñ–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è
        return false;
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤ UI
     */
    updateEnvironmentDisplay() {
        const envInfo = this.getEnvironmentInfo();
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç–∏ –≤ —Ö–µ–¥–µ—Ä—ñ
        const osElement = document.querySelector('.env-os');
        const browserElement = document.querySelector('.env-browser');
        
        osElement.textContent = `OS: ${envInfo.os}`;
        browserElement.textContent = `Browser: ${envInfo.fullBrowser}`;
        
        // –Ø–∫—â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è - –¥–æ–¥–∞–≤–∞–π—Ç–µ —á–µ—Ä–≤–æ–Ω–∏–π —Å—Ç–∏–ª—å
        if (!envInfo.isSupported) {
            osElement.style.color = '#dc3545'; // –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä
            osElement.style.fontWeight = 'bold';
            browserElement.style.color = '#dc3545';
            browserElement.style.fontWeight = 'bold';
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫—É–≤–∞–ª—å–Ω–∏–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            this.showUnsupportedDeviceMessage();
            
            // –ë–ª–æ–∫—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
            this.blockUIForUnsupportedDevice();
        }
        
        // –î–æ–¥–∞—î–º–æ CSS –∫–ª–∞—Å–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
        document.querySelector('.env-info').classList.add('ready');
        
        console.log('üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ:', envInfo);
        console.log(`üì± –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è: ${envInfo.isSupported}`);
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
     */
    showUnsupportedDeviceMessage() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö –≤—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        const warningBlock = document.createElement('div');
        warningBlock.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
            padding: 1rem;
            text-align: center;
            z-index: 9999;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        `;
        
        warningBlock.innerHTML = `
            <div style="max-width: 800px; margin: 0 auto;">
                <h3 style="margin: 0 0 0.5rem 0; font-size: 1.2rem;">
                    üì± –ú–æ–±—ñ–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –ø–æ–∫–∏ —â–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è
                </h3>
                <p style="margin: 0; opacity: 0.9;">
                    –ù–∞ Android —Ç–∞ iOS –º–∞—é—Ç—å –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—ñ–≤. 
                    –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <strong>Desktop –±—Ä–∞—É–∑–µ—Ä</strong> (Chrome, Edge –∞–±–æ Firefox –Ω–∞ Windows/Mac/Linux)
                </p>
            </div>
        `;
        
        document.body.appendChild(warningBlock);
        
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        document.body.style.paddingTop = warningBlock.offsetHeight + 'px';
    }

    /**
     * –ë–ª–æ–∫—É—î UI –¥–ª—è –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
     */
    blockUIForUnsupportedDevice() {
        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–∞–ø–æ–∫
        const selectInputBtn = document.getElementById('selectInputBtn');
        const selectOutputBtn = document.getElementById('selectOutputBtn');
        const startBtn = document.getElementById('startBtn');
        
        if (selectInputBtn) {
            selectInputBtn.disabled = true;
            selectInputBtn.style.opacity = '0.5';
        }
        if (selectOutputBtn) {
            selectOutputBtn.disabled = true;
            selectOutputBtn.style.opacity = '0.5';
        }
        if (startBtn) {
            startBtn.disabled = true;
            startBtn.style.opacity = '0.5';
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫
     */
    async init() {
        try {
            console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Photo Sorter WASM...');
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
            this.isAndroidDevice = /Android/i.test(navigator.userAgent);
            if (this.isAndroidDevice) {
                console.log('üì± –í–∏—è–≤–ª–µ–Ω–æ Android –ø—Ä–∏—Å—Ç—Ä—ñ–π');
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ loading overlay
            this.showLoadingOverlay();
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ WASM –º–æ–¥—É–ª—å
            await this.wasmLoader.load();
            
            // –í—ñ–¥–æ–±—Ä–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
            this.updateEnvironmentDisplay();
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
            this.initializeUI();
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            this.loadSettings();
            
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ loading overlay
            this.hideLoadingOverlay();
            
            this.isInitialized = true;
            console.log('‚úÖ –î–æ–¥–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            this.hideLoadingOverlay();
            this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É: ' + error.message);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î UI –µ–ª–µ–º–µ–Ω—Ç–∏
     */
    initializeUI() {
        // –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–∞–ø–æ–∫
        document.getElementById('selectInputBtn').addEventListener('click', () => this.selectInputFolder());
        document.getElementById('selectOutputBtn').addEventListener('click', () => this.selectOutputFolder());
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏
        document.getElementById('startBtn').addEventListener('click', () => this.startProcessing());
        
        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        document.getElementById('cancelBtn').addEventListener('click', () => this.cancelProcessing());
        
        // –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        document.getElementById('settingsBtn').addEventListener('click', () => this.showSettingsModal());
        
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
        document.getElementById('closeSettingsBtn').addEventListener('click', () => this.hideSettingsModal());
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        document.getElementById('saveSettingsBtn').addEventListener('click', () => this.saveSettings());
        
        // –ó–º—ñ–Ω–∞ –æ–ø—Ü—ñ–π –æ–±—Ä–æ–±–∫–∏
        document.querySelectorAll('input[name="processingMode"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.currentSettings.processingMode = e.target.value;
                this.updateStartButton();
            });
        });
        
        // –ó–º—ñ–Ω–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        
        // –ó–º—ñ–Ω–∞ —á–µ–∫–±–æ–∫—Å—ñ–≤
        document.getElementById('createSubfolders').addEventListener('change', (e) => {
            this.currentSettings.createSubfolders = e.target.checked;
        });
        
        document.getElementById('handleDuplicates').addEventListener('change', (e) => {
            this.currentSettings.handleDuplicates = e.target.checked;
        });
        
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                }
            });
        });
        
        console.log('üé® UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–æ–∫–∞–∑—É—î loading overlay
     */
    showLoadingOverlay() {
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤—É—î loading overlay
     */
    hideLoadingOverlay() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    showError(message) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ toast –¥–ª—è –ø–æ–º–∏–ª–∫–∏
        const toast = document.createElement('div');
        toast.className = 'toast toast-error';
        toast.innerHTML = `
            <i class="fas fa-exclamation-circle"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    showSuccess(message) {
        const toast = document.createElement('div');
        toast.className = 'toast toast-success';
        toast.innerHTML = `
            <i class="fas fa-check-circle"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }

    /**
     * –í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
     */
    async selectInputFolder() {
        try {
            const folderHandle = await this.fileHandler.selectInputFolder();
            if (folderHandle) {
                const folderInfo = await this.fileHandler.getFolderInfo(folderHandle);
                this.updateInputFolderInfo(folderInfo);
                this.updateStartButton();
            }
        } catch (error) {
            this.showError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏: ' + error.message);
        }
    }

    /**
     * –í–∏–±—ñ—Ä –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
     */
    async selectOutputFolder() {
        try {
            const folderHandle = await this.fileHandler.selectOutputFolder();
            if (folderHandle) {
                const folderInfo = await this.fileHandler.getFolderInfo(folderHandle);
                this.updateOutputFolderInfo(folderInfo);
                this.updateStartButton();
            }
        } catch (error) {
            this.showError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏: ' + error.message);
        }
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É
     * @param {Object} folderInfo - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–ø–∫—É
     */
    updateInputFolderInfo(folderInfo) {
        const card = document.getElementById('inputFolderCard');
        const info = document.getElementById('inputFolderInfo');
        const path = document.getElementById('inputFolderPath');
        const stats = document.getElementById('inputFolderStats');
        
        card.classList.add('selected');
        info.style.display = 'block';
        path.textContent = folderInfo.name;
        stats.textContent = `${folderInfo.fileCount} —Ñ–∞–π–ª—ñ–≤, ${folderInfo.formattedSize}`;
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É
     * @param {Object} folderInfo - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–ø–∫—É
     */
    updateOutputFolderInfo(folderInfo) {
        const card = document.getElementById('outputFolderCard');
        const info = document.getElementById('outputFolderInfo');
        const path = document.getElementById('outputFolderPath');
        const stats = document.getElementById('outputFolderStats');
        
        card.classList.add('selected');
        info.style.display = 'block';
        path.textContent = folderInfo.name;
        stats.textContent = `${folderInfo.fileCount} —Ñ–∞–π–ª—ñ–≤, ${folderInfo.formattedSize}`;
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
     */
    updateStartButton() {
        const startBtn = document.getElementById('startBtn');
        const hasInputFolder = this.fileHandler.inputFolderHandle !== null;
        const hasOutputFolder = this.fileHandler.outputFolderHandle !== null;
        
        startBtn.disabled = !hasInputFolder || !hasOutputFolder || this.isProcessing;
    }

    /**
     * –ü–æ—á–∏–Ω–∞—î –æ–±—Ä–æ–±–∫—É —Ñ–∞–π–ª—ñ–≤
     */
    async startProcessing() {
        if (this.isProcessing) {
            return;
        }

        try {
            this.isProcessing = true;
            this.updateStartButton();
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –ø—Ä–æ–≥—Ä–µ—Å—É
            document.getElementById('progressSection').style.display = 'block';
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ
            this.fileHandler.clear();
            this.clearProgressLog();
            
            // –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
            const result = await this.fileHandler.processAllFiles(
                this.currentSettings,
                (progress) => this.updateProgress(progress)
            );
            
            this.showSuccess(`–û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–æ–±–ª–µ–Ω–æ: ${result.processed}, –ø–æ–º–∏–ª–æ–∫: ${result.errors}`);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤: ' + error.message);
        } finally {
            this.isProcessing = false;
            this.updateStartButton();
        }
    }

    /**
     * –°–∫–∞—Å–æ–≤—É—î –æ–±—Ä–æ–±–∫—É
     */
    cancelProcessing() {
        this.fileHandler.cancelProcessing();
        this.isProcessing = false;
        this.updateStartButton();
        this.showSuccess('–û–±—Ä–æ–±–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å –æ–±—Ä–æ–±–∫–∏
     * @param {Object} progress - –î–∞–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É
     */
    updateProgress(progress) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        const progressFill = document.getElementById('progressFill');
        const percentage = Math.round((progress.current / progress.total) * 100);
        progressFill.style.width = percentage + '%';
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('processedCount').textContent = progress.processed;
        document.getElementById('errorCount').textContent = progress.errors;
        document.getElementById('skippedCount').textContent = progress.skipped;
        
        // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å –≤ –ª–æ–≥ –∑ —Ä–æ–∑–º—ñ—Ä–æ–º —Ñ–∞–π–ª—É —Ç–∞ –¥–∞—Ç–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        let logMessage = `${progress.currentFile}`;
        if (progress.result.success && progress.result.size) {
            logMessage += ` (${this.formatFileSize(progress.result.size)})`;
        }
        
        // –î–æ–¥–∞—î–º–æ –¥–∞—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫—â–æ —î
        if (progress.result.success && progress.result.dateInfo) {
            logMessage += ` - ${progress.result.dateInfo}`;
        }
        
        logMessage += `: ${progress.result.success ? '—É—Å–ø—ñ—à–Ω–æ' : progress.result.error}`;
        
        this.addLogEntry(progress.result.success ? 'success' : 'error', logMessage);
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
        if (/Android|iPhone|iPad|BlackBerry|Windows Phone/.test(navigator.userAgent)) {
            console.log(`üì± –ú–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π: –æ–±—Ä–æ–±–ª–µ–Ω–æ ${progress.current} –∑ ${progress.total}`);
        }
    }

    /**
     * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –≤ –ª–æ–≥
     * @param {string} type - –¢–∏–ø –∑–∞–ø–∏—Å—É
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    addLogEntry(type, message) {
        const logContent = document.getElementById('logContent');
        const entry = document.createElement('div');
        entry.className = `log-entry ${type}`;
        entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        
        logContent.appendChild(entry);
        logContent.scrollTop = logContent.scrollHeight;
    }

    /**
     * –û—á–∏—â–∞—î –ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—É
     */
    clearProgressLog() {
        document.getElementById('logContent').innerHTML = '';
    }


    /**
     * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
     */
    showSettingsModal() {
        document.getElementById('settingsModal').classList.add('active');
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
     */
    hideSettingsModal() {
        document.getElementById('settingsModal').classList.remove('active');
    }


    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    saveSettings() {
        this.currentSettings.language = document.getElementById('languageSelect').value;
        this.currentSettings.folderFormat = document.getElementById('folderFormatSelect').value;
        this.currentSettings.maxFileSize = parseInt(document.getElementById('maxFileSize').value);
        
        this.fileHandler.setMaxFileSize(this.currentSettings.maxFileSize);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        localStorage.setItem('photoSorterSettings', JSON.stringify(this.currentSettings));
        
        this.hideSettingsModal();
        this.showSuccess('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    loadSettings() {
        try {
            const saved = localStorage.getItem('photoSorterSettings');
            if (saved) {
                this.currentSettings = { ...this.currentSettings, ...JSON.parse(saved) };
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            document.getElementById('languageSelect').value = this.currentSettings.language;
            document.getElementById('folderFormatSelect').value = this.currentSettings.folderFormat;
            document.getElementById('maxFileSize').value = this.currentSettings.maxFileSize;
            
            this.fileHandler.setMaxFileSize(this.currentSettings.maxFileSize);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
     * @param {number} bytes - –†–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     * @returns {Object} –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    getSettings() {
        return { ...this.currentSettings };
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     * @param {Object} settings - –ù–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    setSettings(settings) {
        this.currentSettings = { ...this.currentSettings, ...settings };
        this.loadSettings();
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
    const app = new PhotoSorterApp();
    await app.init();
    
    // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–æ–¥–∞—Ç–∫—É
    window.photoSorterApp = app;
    
    console.log('üéâ Photo Sorter WASM –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', (event) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Promise:', event.reason);
});

// –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const toastStyles = document.createElement('style');
toastStyles.textContent = `
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        color: white;
        font-weight: 500;
        z-index: 10000;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);
        animation: slideIn 0.3s ease-out;
    }
    
    .toast-success {
        background: #10b981;
    }
    
    .toast-error {
        background: #ef4444;
    }
    
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
`;
document.head.appendChild(toastStyles);
