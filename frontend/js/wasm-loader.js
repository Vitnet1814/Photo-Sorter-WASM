/**
 * WebAssembly Loader
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î WASM –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ
 */

class WASMLoader {
    constructor() {
        this.module = null;
        this.isLoaded = false;
        this.isLoading = false;
        this.loadPromise = null;
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î WASM –º–æ–¥—É–ª—å
     * @returns {Promise<Object>} WASM –º–æ–¥—É–ª—å
     */
    async load() {
        if (this.isLoaded) {
            return this.module;
        }

        if (this.isLoading) {
            return this.loadPromise;
        }

        this.isLoading = true;
        this.loadPromise = this._loadModule();

        try {
            this.module = await this.loadPromise;
            this.isLoaded = true;
            this.isLoading = false;
            return this.module;
        } catch (error) {
            this.isLoading = false;
            throw error;
        }
    }

    /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è
     * @returns {Promise<Object>} WASM –º–æ–¥—É–ª—å
     */
    async _loadModule() {
        try {
            console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WebAssembly –º–æ–¥—É–ª—è...');
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É WebAssembly
            if (!window.WebAssembly) {
                throw new Error('WebAssembly –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥—É–ª—å
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∫—Ä–∏–ø—Ç
            const script = document.createElement('script');
            script.src = '../frontend/wasm/photo-processor.js';
            script.type = 'text/javascript';
            
            return new Promise((resolve, reject) => {
                script.onload = () => {
                    try {
                        // –°–ø—Ä–∞–≤–∂–Ω—ñ–π WASM –º–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è —è–∫ —Ñ—É–Ω–∫—Ü—ñ—è
                        PhotoProcessor().then(module => {
                            console.log('‚úÖ WebAssembly –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                            console.log('üìä –†–æ–∑–º—ñ—Ä –º–æ–¥—É–ª—è:', module.buffer ? module.buffer.byteLength : 'N/A', '–±–∞–π—Ç');
                            resolve(module);
                        }).catch(error => {
                            reject(error);
                        });
                    } catch (error) {
                        reject(error);
                    }
                };
                script.onerror = () => {
                    reject(new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ WASM –º–æ–¥—É–ª—å'));
                };
                document.head.appendChild(script);
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WASM –º–æ–¥—É–ª—è:', error);
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ WASM –º–æ–¥—É–ª—å: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤–µ—Ä—Å—ñ—é –º–æ–¥—É–ª—è
     * @returns {string} –í–µ—Ä—Å—ñ—è –º–æ–¥—É–ª—è
     */
    getVersion() {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
        return this.module.ccall('getVersion', 'string', [], []);
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω–µ —Ñ–æ—Ç–æ
     * @param {string} filename - –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
     * @param {Uint8Array} fileData - –î–∞–Ω—ñ —Ñ–∞–π–ª—É
     * @param {string} dateTaken - –î–∞—Ç–∞ –∑–π–æ–º–∫–∏
     * @param {string} dateModified - –î–∞—Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     * @param {string} cameraMake - –í–∏—Ä–æ–±–Ω–∏–∫ –∫–∞–º–µ—Ä–∏
     * @param {string} cameraModel - –ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä–∏
     * @param {string} location - –õ–æ–∫–∞—Ü—ñ—è
     * @param {number} fileSize - –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @param {number} height - –í–∏—Å–æ—Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    processPhoto(filename, fileData, dateTaken, dateModified, cameraMake, cameraModel, location, fileSize, width, height) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –≤ WASM
            if (fileData.length > 32 * 1024) {
                console.warn(`‚ö†Ô∏è –§–∞–π–ª ${filename} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è WASM (${fileData.length} –±–∞–π—Ç), –æ–±–º–µ–∂—É—î–º–æ –¥–æ 32KB`);
                fileData = fileData.slice(0, 32 * 1024);
            }

            this.module.ccall('processPhoto', null, 
                ['string', 'array', 'number', 'string', 'string', 'string', 'string', 'string', 'number', 'number', 'number'],
                [filename, fileData, fileData.length, dateTaken, dateModified, cameraMake, cameraModel, location, fileSize, width, height]
            );
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ:', error);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ñ–æ—Ç–æ
     * @returns {number} –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
     */
    getProcessedCount() {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
        return this.module.ccall('getProcessedCount', 'number', [], []);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–æ—Ç–æ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º
     * @param {number} index - –Ü–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ
     * @returns {Object} –ú–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–æ—Ç–æ
     */
    getPhotoMetadata(index) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            const metadataStr = this.module.ccall('getPhotoMetadata', 'string', ['number'], [index]);
            return JSON.parse(metadataStr);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö:', error);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ
     * @param {number} index - –Ü–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ
     * @param {string} basePath - –ë–∞–∑–æ–≤–∏–π —à–ª—è—Ö
     * @returns {string} –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
     */
    getFolderStructure(index, basePath) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('getFolderStructure', 'string', ['number', 'string'], [index, basePath]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫:', error);
            return basePath + '/–ë–µ–∑ –¥–∞—Ç–∏';
        }
    }

    /**
     * –û—á–∏—â–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ
     */
    clearMetadata() {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            this.module.ccall('clearMetadata', null, [], []);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–æ–±–∫–∏
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStatistics() {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            const statsStr = this.module.ccall('getStatistics', 'string', [], []);
            return JSON.parse(statsStr);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                total_photos: 0,
                valid_photos: 0,
                with_exif: 0,
                large_files: 0,
                total_size: 0,
                errors: 0
            };
        }
    }

    /**
     * –°–æ—Ä—Ç—É—î —Ñ–æ—Ç–æ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
     * @param {number} criteria - –ö—Ä–∏—Ç–µ—Ä—ñ–π —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (0-3)
     */
    sortPhotos(criteria) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            this.module.ccall('sortPhotos', null, ['number'], [criteria]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ:', error);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î EXIF —á–∏—Ç–∞—á
     * @param {Uint8Array} fileData - –î–∞–Ω—ñ —Ñ–∞–π–ª—É
     * @returns {number} –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     */
    createExifReader(fileData) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –≤ WASM
            if (fileData.length > 32 * 1024) {
                console.warn(`‚ö†Ô∏è EXIF –¥–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ (${fileData.length} –±–∞–π—Ç), –æ–±–º–µ–∂—É—î–º–æ –¥–æ 32KB`);
                fileData = fileData.slice(0, 32 * 1024);
            }

            return this.module.ccall('createExifReader', 'number', ['array', 'number'], [fileData, fileData.length]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è EXIF —á–∏—Ç–∞—á–∞:', error);
            return 0;
        }
    }

    /**
     * –ó–Ω–∏—â—É—î EXIF —á–∏—Ç–∞—á
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     */
    destroyExifReader(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            this.module.ccall('destroyExifReader', null, ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è EXIF —á–∏—Ç–∞—á–∞:', error);
        }
    }

    /**
     * –ß–∏—Ç–∞—î –¥–∞—Ç—É –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} –î–∞—Ç–∞ –∑–π–æ–º–∫–∏
     */
    readExifDate(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readExifDate', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ EXIF:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –∫–∞–º–µ—Ä–∏ –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} –í–∏—Ä–æ–±–Ω–∏–∫ –∫–∞–º–µ—Ä–∏
     */
    readCameraMake(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readCameraMake', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –∫–∞–º–µ—Ä–∏:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä–∏ –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} –ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä–∏
     */
    readCameraModel(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readCameraModel', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∫–∞–º–µ—Ä–∏:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î —à–∏—Ä–∏–Ω—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {number} –®–∏—Ä–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    readImageWidth(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readImageWidth', 'number', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
            return 0;
        }
    }

    /**
     * –ß–∏—Ç–∞—î –≤–∏—Å–æ—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {number} –í–∏—Å–æ—Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    readImageHeight(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readImageHeight', 'number', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤–∏—Å–æ—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
            return 0;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å EXIF –¥–∞–Ω–∏—Ö
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {boolean} –ß–∏ —î EXIF –¥–∞–Ω—ñ
     */
    hasExifData(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('hasExifData', 'boolean', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ EXIF –¥–∞–Ω–∏—Ö:', error);
            return false;
        }
    }

    /**
     * –ß–∏—Ç–∞—î DateTime –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} DateTime
     */
    readExifDateTime(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readExifDateTime', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è DateTime –∑ EXIF:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î DateTimeDigitized –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} DateTimeDigitized
     */
    readExifDateTimeDigitized(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readExifDateTimeDigitized', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è DateTimeDigitized –∑ EXIF:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î GPSDateStamp –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} GPSDateStamp
     */
    readExifGpsDateStamp(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readExifGpsDateStamp', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è GPSDateStamp –∑ EXIF:', error);
            return '';
        }
    }

    /**
     * –ß–∏—Ç–∞—î GPSTimeStamp –∑ EXIF
     * @param {number} readerPtr - –ü–æ–∫–∞–∂—á–∏–∫ –Ω–∞ EXIF —á–∏—Ç–∞—á
     * @returns {string} GPSTimeStamp
     */
    readExifGpsTimeStamp(readerPtr) {
        if (!this.isLoaded) {
            throw new Error('WASM –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }

        try {
            return this.module.ccall('readExifGpsTimeStamp', 'string', ['number'], [readerPtr]);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è GPSTimeStamp –∑ EXIF:', error);
            return '';
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–æ–¥—É–ª—å
     * @returns {boolean} –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    isModuleLoaded() {
        return this.isLoaded;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥—É–ª—å
     * @returns {Object} –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥—É–ª—å
     */
    getModuleInfo() {
        if (!this.isLoaded) {
            return {
                loaded: false,
                version: null,
                memory: null
            };
        }

        return {
            loaded: true,
            version: this.getVersion(),
            memory: {
                used: this.module.buffer.byteLength,
                total: this.module.buffer.byteLength
            }
        };
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
window.wasmLoader = new WASMLoader();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = WASMLoader;
}
